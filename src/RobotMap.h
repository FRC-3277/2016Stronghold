// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ROBOTMAP_H
#define ROBOTMAP_H
#include "WPILib.h"


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
class RobotMap {
public:
	static const int CAN_ID_DRIVE_LEFT_TALON = 7;
	static const int CAN_ID_DRIVE_RIGHT_TALON = 3;
	static const int CAN_ID_ARM_LINEAR_ACTUATOR_TALON = 4;
	static const int CAN_ID_ARM_EXTEND_TALON = 2;
	static const int CAN_ID_ARM_WINCH_1_TALON = 1;
	static const int CAN_ID_ARM_WINCH_2_TALON = 6;
	static const int CAN_ID_BOULDER_BLASTER_TALON = 5;

	static const bool TIMED_DISABLE_ARM = false;

	static std::shared_ptr<CANTalon> driveTrainCANTalonLeft;
	static std::shared_ptr<CANTalon> driveTrainCANTalonRight;
	static std::shared_ptr<RobotDrive> driveTrainRobotDrive21;

	static std::shared_ptr<CANTalon> armExtendCANTalon;
	static std::shared_ptr<CANTalon> armLinearActuatorCANTalon;
	static std::shared_ptr<CANTalon> armWinchCANTalon1;
	static std::shared_ptr<CANTalon> armWinchCANTalon2;
	static std::shared_ptr<Relay> armRatchet;
	static std::shared_ptr<AnalogInput> armPotentiameter;

	static std::shared_ptr<CANTalon> boulderBlasterCANTalon;

	static std::shared_ptr<Servo> camraPanServo;
	static std::shared_ptr<Servo> camraTiltServo;
	static std::shared_ptr<DigitalInput> Switch0;
	static std::shared_ptr<DigitalInput> Switch1;
	static std::shared_ptr<DigitalInput> Switch2;
	static std::shared_ptr<DigitalInput> Switch3;
	static std::shared_ptr<DigitalInput> Switch4;
	static std::shared_ptr<DigitalInput> Switch5;
	static std::shared_ptr<DigitalInput> Switch6;
	static std::shared_ptr<DigitalInput> Switch7;
	static std::shared_ptr<DigitalInput> Switch8;
	static std::shared_ptr<DigitalInput> Switch9;

	static void init();
};
#endif
