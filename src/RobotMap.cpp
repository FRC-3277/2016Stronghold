// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::driveTrainCANTalonLeft;
std::shared_ptr<CANTalon> RobotMap::driveTrainCANTalonRight;
std::shared_ptr<RobotDrive> RobotMap::driveTrainRobotDrive21;
std::shared_ptr<CANTalon> RobotMap::driveTrainCANTalonLeft2;
std::shared_ptr<CANTalon> RobotMap::driveTrainCANTalonRight2;
std::shared_ptr<CANTalon> RobotMap::lifterCANTalon;
std::shared_ptr<CANTalon> RobotMap::boulderBlasterCANTalon;
std::shared_ptr<CANTalon> RobotMap::armCANTalon;



std::shared_ptr<Spark> RobotMap::armLinearActuator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

std::shared_ptr<Servo> RobotMap::camraPanServo;
std::shared_ptr<Servo> RobotMap::camraTiltServo;
std::shared_ptr<DigitalInput> RobotMap::Switch0;
std::shared_ptr<DigitalInput> RobotMap::Switch1;
std::shared_ptr<DigitalInput> RobotMap::Switch2;
std::shared_ptr<DigitalInput> RobotMap::Switch3;
std::shared_ptr<DigitalInput> RobotMap::Switch4;
std::shared_ptr<DigitalInput> RobotMap::Switch5;
std::shared_ptr<DigitalInput> RobotMap::Switch6;
std::shared_ptr<DigitalInput> RobotMap::Switch7;
std::shared_ptr<DigitalInput> RobotMap::Switch8;
std::shared_ptr<DigitalInput> RobotMap::Switch9;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveTrainCANTalonLeft.reset(new CANTalon(1));
    lw->AddActuator("DriveTrain", "CAN Talon Left", driveTrainCANTalonLeft);
    driveTrainCANTalonLeft.get()->SetInverted(true);
    
    driveTrainCANTalonRight.reset(new CANTalon(2));
    lw->AddActuator("DriveTrain", "CAN Talon Right", driveTrainCANTalonRight);
    driveTrainCANTalonRight.get()->SetInverted(true);
    
    driveTrainCANTalonLeft2.reset(new CANTalon(3));
       lw->AddActuator("DriveTrain", "CAN Talon Left 2", driveTrainCANTalonLeft2);
       driveTrainCANTalonLeft2.get()->SetInverted(true);

       driveTrainCANTalonRight2.reset(new CANTalon(4));
       lw->AddActuator("DriveTrain", "CAN Talon Right 2", driveTrainCANTalonRight2);
       driveTrainCANTalonRight2.get()->SetInverted(true);

    lifterCANTalon.reset(new CANTalon(5));
    lw->AddActuator("Lifter", "CAN Lifter", lifterCANTalon);

    armCANTalon.reset(new CANTalon(7));
    lw->AddActuator("Lifter", "CAN arm", armCANTalon);

   Switch0.reset(new DigitalInput(0));
   Switch1.reset(new DigitalInput(1));
   Switch2.reset(new DigitalInput(2));
   Switch3.reset(new DigitalInput(3));
   Switch4.reset(new DigitalInput(4));
   Switch5.reset(new DigitalInput(5));
   Switch6.reset(new DigitalInput(6));
   Switch7.reset(new DigitalInput(7));
   Switch8.reset(new DigitalInput(8));
   Switch9.reset(new DigitalInput(9));


       //lifterCANJaguar.get()->ConfigLimitMode(lifterCANJaguar.get()->kLimitMode_SwitchInputsOnly);
    	driveTrainRobotDrive21.reset(new RobotDrive(driveTrainCANTalonLeft,
    		 driveTrainCANTalonLeft2, driveTrainCANTalonRight, driveTrainCANTalonRight2));
    
    driveTrainRobotDrive21->SetSafetyEnabled(true);
        driveTrainRobotDrive21->SetExpiration(0.1);
        driveTrainRobotDrive21->SetSensitivity(0.5);
        driveTrainRobotDrive21->SetMaxOutput(1.0);

    armLinearActuator.reset(new Spark(0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    camraPanServo.reset(new Servo(9));
    camraTiltServo.reset(new Servo(8));

    boulderBlasterCANTalon.reset(new CANTalon(6));
    lw->AddActuator("BoulderBlaster", "CAN BoulderBlaster", boulderBlasterCANTalon);
}
